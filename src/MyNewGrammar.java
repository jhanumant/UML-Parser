/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
import java.io.*;
import net.sourceforge.plantuml.*;
import java.awt.image.*;
import javax.imageio.*;
import java.lang.*;
import java.util.*;


public class MyNewGrammar implements MyNewGrammarConstants {
  public static ArrayList <String > dependencyClass =new ArrayList<String >(); //Stores Class Names
  public static ArrayList <String > dependencyInterface =new ArrayList<String >(); //Stores Interface Names
  public static HashMap <String,String > dependencyVar= new HashMap<String,String >(); // Stores Var and return types
  public static HashMap <String,String > dependencyIntVar= new HashMap<String,String >(); //Stores Method parameter and return types
  public static ArrayList <String> cardinality= new ArrayList<String>(); //Stores Association data
  public static int index,intIndex;
  public static ArrayList <String > getSetVariables = new ArrayList<String >(); // getter and setter variables
  public static String returnValue="";
  public static HashMap<String, ArrayList<String >> implementRel = new HashMap<String, ArrayList<String >>(); //Class..| > Interface
  public static HashMap<String,ArrayList<String >> interfaceMethods = new HashMap<String,ArrayList<String >>(); //Methods within interface
  public static HashMap<String,String > classMethods = new HashMap<String,String >(); //Methods within a class
  public static int impRelIndex=0;

  //Skip method body
  public static void error_skipto(int kind,Stack stack,String identifierA) {
     int obracketKind=OBracket;
     Token t;
         while(!stack.isEmpty())
         {
           t = getNextToken();
       if(t.kind==RETURNSTATEMENT) //If token is a return statement           {
                returnValue= t.toString();
           }
           if(t.kind==ASSIGNSTATEMENT) returnValue= t.toString(); //if token is an assignment statement
           if(t.kind==ID)
           {
              dependencyIntVar.put(identifierA+","+intIndex,t.toString());
              intIndex++;
           }
           if(t.kind==obracketKind )
       {
                stack.push(t.toString());
       }
       else if(t.kind==kind)
       {
                stack.pop();
       }
    }
  }

  public static String var_skipto(int kind)
  {
        Token t;
        String temp="";
        while(true) {
            t=getToken(1);
                if(t.kind==kind)
                {
                        break;
                }
                t=getNextToken();
        }
        return temp;
  }

        private static Boolean CheckFileFormat(String outputFileFormat) {
                if(outputFileFormat.equalsIgnoreCase("png")  || outputFileFormat.equalsIgnoreCase("pdf"))
                        return true;
                else
                        return false;
        }

  public static void main(String[] args)throws ParseException
  {
    String plantUMLData="";
    int fileIndex=1;
    try
    {
        if(args.length>0 && args.length==2)
        {
                String target_dir = args[0];
                File directory = new File(target_dir);
                Boolean isValidDirectory = directory.isDirectory();
                        if(!isValidDirectory)
                        {
                                System.out.println("Invalid Path.");
                                System.exit(1);
                        }
                        fileIndex = args[1].indexOf('.');
                        if(fileIndex<0){
                                System.out.println("Please mention proper file type For eg: .png or .pdf");
                                System.exit(1);
                        }
                        else
                        {
                                String outputFileFormat = args[1].substring(fileIndex+1, args[1].length());
                                Boolean hasAllowedFormat = CheckFileFormat(outputFileFormat);
                                if(!hasAllowedFormat)
                                {
                                        System.out.println("The following formats are allowed: .png,.pdf");
                                        System.exit(1);
                                }
                        }
                File[] files = directory.listFiles(new FilenameFilter() {
                                @Override
                                public boolean accept(File dir, String name) {
                                        return name.toLowerCase().endsWith(".java");
                                }
                        });
                        PrintWriter writer = new PrintWriter("JInput.txt", "UTF-8");
                for (File f : files) {
                    if(f.isFile()) {
                        BufferedReader inputStream = null;

                        try {
                            inputStream = new BufferedReader(
                                            new FileReader(f));
                            String line;

                            while ((line = inputStream.readLine()) != null) {
                               writer.println(line);

                            }
                        }
                        finally {
                            if (inputStream != null) {
                                inputStream.close();
                            }
                        }
                    }
                }
                writer.close();
                MyNewGrammar parser = new MyNewGrammar(new FileInputStream("JInput.txt"));

                    plantUMLData="@startuml\u005cnskinparam classAttributeIconSize 0\u005cnskinparam classFontStyle bold\u005cn";
                    while(!plantUMLData.contains("@endUML"))
                    {
                      //Parse each line
                      plantUMLData = parser.parseOneLine(plantUMLData);
                    }
                    ByteArrayOutputStream output = new ByteArrayOutputStream();
                        SourceStringReader reader=new SourceStringReader(plantUMLData);
                        String desc =reader.generateImage(output);
                        byte [] data = output.toByteArray();
                    InputStream inputImageStream = new ByteArrayInputStream(data);
                    BufferedImage umlImage = ImageIO.read(inputImageStream);
                    ImageIO.write(umlImage, "png", new File(args[1]));
                    System.out.print("Diagram generated successfully!!");
                }
         }
         catch(Exception e)
         {
            System.out.println(plantUMLData);
                System.out.println(e.getMessage());
                e.printStackTrace();
                System.out.println("Error in grammar!!");
         }
  }

  static final public String parseOneLine(String plantUMLData) throws ParseException {
  ArrayList a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
    case CLASS:
    case ABSTRACT:
    case IMPORT:
    case PACKAGE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PACKAGE:
        jj_consume_token(PACKAGE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE:
          jj_consume_token(NAMESPACE);
          jj_consume_token(ID);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }

      a = returnID();
    for(int i=0; i<a.size();i++)
    {
                plantUMLData += a.get(i);
    }
    {if (true) return plantUMLData;}
      break;
    case 0:
      jj_consume_token(0);
    Iterator<String> keySetIterator = dependencyVar.keySet().iterator();
    Iterator<String> keySetIteratorInt = dependencyIntVar.keySet().iterator();
    String[] parts;
    String multiplicity1,multiplicity2,multiplicity3="\u005c" \u005c"";
    ArrayList<String > A = new ArrayList<String >();
    ArrayList<String > B = new ArrayList<String >();
    ArrayList<String > C = new ArrayList<String >();
    int replaceVarIndex=0;
        while(keySetIterator.hasNext())
        {
                String nextKey = keySetIterator.next();
                parts=nextKey.split(",");
                if(dependencyVar.get(nextKey).contains("[*]"))
                {
                        multiplicity1=dependencyVar.get(nextKey).substring(0,dependencyVar.get(nextKey).indexOf("["));
                        multiplicity2=dependencyVar.get(nextKey).substring(dependencyVar.get(nextKey).indexOf("[")+1,
                                        dependencyVar.get(nextKey).indexOf("]"));
                        A.add(parts[0]);
                        B.add(multiplicity1);
                        C.add("\u005c""+multiplicity2+"\u005c"");
                }
                else
                {
                        multiplicity1=dependencyVar.get(nextKey);
                        multiplicity2=" ";
                        A.add(parts[0]);
                        B.add(multiplicity1);
                        C.add("\u005c""+multiplicity2+"\u005c"");
                }
                //System.out.println(dependencyVar.get(nextKey));
                for(int i=0;i<dependencyClass.size();i++)
                {
                        //Remove variables of type Interface
                        for(int p=0;p<dependencyInterface.size();p++)
                        {
                          if(multiplicity1.equals(dependencyInterface.get(p)))
                          {
                              if(!plantUMLData.contains(parts[0]+"--"+"\u005c""+multiplicity2+"\u005c""+dependencyInterface.get(p)))
                                plantUMLData+="\u005cn"+parts[0]+"--"+"\u005c""+multiplicity2+"\u005c""+dependencyInterface.get(p)+"\u005cn";
                          }
                          if(cardinality.get(replaceVarIndex).contains(dependencyInterface.get(p)))
                          {
                            String strResult=
                                        plantUMLData.replace(cardinality.get(replaceVarIndex),"");
                                plantUMLData=strResult;
                          }
                        }
                        //if variable type is of class
                        if(multiplicity1.equals(dependencyClass.get(i)))
                        {
                                if(plantUMLData.contains(cardinality.get(replaceVarIndex)))
                                {
                                        String strResult=
                                                        plantUMLData.replace(cardinality.get(replaceVarIndex),"");
                                        plantUMLData=strResult;

                                }
                                int id;
                                for(int t=0;t<A.size();t++)
                                {
                                        if(parts[0].equals(B.get(t)) && dependencyClass.get(i).equals(A.get(t)))
                                        {
                                                multiplicity3=C.get(t);
                                        }
                                }
                                if(!(plantUMLData.contains(dependencyClass.get(i)+" "+"\u005c""+multiplicity2+"\u005c""+" -- "+multiplicity3+" "+parts[0])))
                                {
                                        plantUMLData+="\u005cn"+parts[0]+" "+multiplicity3+" -- \u005c""+multiplicity2+"\u005c""+" "+dependencyClass.get(i)+"\u005cn";
                                }
                        }
                }
                replaceVarIndex++;
        }
        String replacedString;
        int count=0;
        //for uses relationship 
        while(keySetIteratorInt.hasNext())
        {
                String nextKey = keySetIteratorInt.next();
                parts=nextKey.split(",");

                for(int i=0;i<dependencyInterface.size();i++)
                {
                        if(dependencyIntVar.get(nextKey).equals(dependencyInterface.get(i)))
                        {
                                if (!(plantUMLData.contains(parts[0]+"..>"+dependencyInterface.get(i)+":uses")))
                                {
                                  plantUMLData+=parts[0]+"..>"+dependencyInterface.get(i)+":uses"+"\u005cn";
                                }
                        }
                }
        }
        plantUMLData= plantUMLData + "hide interface circle\u005cn\u005cn@endUML";{if (true) return plantUMLData;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//If classes or interfaces or enum
  static final public ArrayList returnID() throws ParseException {
  ArrayList <String > identifierName = new ArrayList<String >();
  ArrayList <String > interfaceIdentifier = new ArrayList<String >();
  Token identifierA,identifierB=null,identifierC=null;
  HashMap <String,String > varIdentifiers =new HashMap <String,String >();
  HashMap <String,String > varNames =new HashMap <String,String >();
  String varMethods="";
  Token classOrInt;
    if (jj_2_1(5)) {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(IMPORT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE:
          jj_consume_token(NAMESPACE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLLECTION:
          case ID:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ID:
              jj_consume_token(ID);
              break;
            case COLLECTION:
              jj_consume_token(COLLECTION);
              break;
            default:
              jj_la1[4] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      identifierA = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        identifierB = jj_consume_token(ID);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        interfaceIdentifier = returnIntID();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(OBracket);
      varIdentifiers = returnVariables();
      varNames = returnMethods(identifierA);
      jj_consume_token(CBracket);
            identifierName.add("\u005cnclass "+identifierA.toString());
            dependencyClass.add(identifierA.toString());
            if(identifierB!=null)
            identifierName.add("--|> "+identifierB.toString()+"\u005cn");
            for(int i=0; i<interfaceIdentifier.size();i++)
            {
                identifierName.add("\u005cninterface " +interfaceIdentifier.get(i)+"<<interface >> \u005cn");
                if(!dependencyInterface.contains(interfaceIdentifier.get(i)))
                                dependencyInterface.add(interfaceIdentifier.get(i));
                        identifierName.add(identifierA.toString()+"..|>"+ interfaceIdentifier.get(i)+"\u005cn");
                        impRelIndex++;
            }
            implementRel.put(identifierA.toString(),interfaceIdentifier);
            {
              identifierName.add("\u005cnclass " + identifierA +"{\u005cn");
              Iterator<String> keySetIterator = varIdentifiers.keySet().iterator();
              while(keySetIterator.hasNext()){
                        String nextKey = keySetIterator.next();
                        if(!nextKey.contains("#"))
                                identifierName.add(nextKey+":"+ varIdentifiers.get(nextKey)+"\u005cn");
                        cardinality.add(nextKey+":"+ varIdentifiers.get(nextKey)+"\u005cn");
                        dependencyVar.put(identifierA.toString()+","+index,varIdentifiers.get(nextKey));
                        index++;
              }
              Iterator<String> keySetIteratorInt = varNames.keySet().iterator();
              String result="";
                  while(keySetIteratorInt.hasNext()){
                String nextKey = keySetIteratorInt.next();
                if(varNames.get(nextKey).contains("^") &&varNames.get(nextKey).contains("^"))
                        result=varNames.get(nextKey).substring(varNames.get(nextKey).indexOf("^") + 1,varNames.get(nextKey).indexOf("~"));
                dependencyIntVar.put(identifierA+","+intIndex,result);
                intIndex++;
                varMethods += "\u005cn"+(nextKey + "("+ varNames.get(nextKey).replace("^","").replace("~","") );
              }
              if(!getSetVariables.isEmpty())
              {
                        for(int count=0;count<getSetVariables.size();count++)
                        {
                                      for(int temp=0;temp<identifierName.size();temp++)
                                      {
                                         if(identifierName.get(temp).contains("-"+getSetVariables.get(count)+":")
                                          && Collections.frequency(getSetVariables,getSetVariables.get(count))==2)
                                         {
                                           String str1= identifierName.get(temp);
                                           String str= str1.replace(("-"+getSetVariables.get(count)+":"),("+"+getSetVariables.get(count)+":"));
                                           identifierName.set(temp,str);
                                         }
                                      }
                        }
               }
              classMethods.put(identifierA.image,varMethods);
              identifierName.add(varMethods);
              identifierName.add("\u005cn}\u005cn");
                }
    } else if (jj_2_2(5)) {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(IMPORT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAMESPACE:
          jj_consume_token(NAMESPACE);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
      }
      jj_consume_token(PUBLIC);
      jj_consume_token(INTERFACE);
      identifierA = jj_consume_token(ID);
      jj_consume_token(OBracket);
      varNames = returnMethods(identifierA);
      jj_consume_token(CBracket);
                  if(!dependencyInterface.contains(identifierA.toString()))
                        dependencyInterface.add(identifierA.toString());
              identifierName.add("\u005cninterface "+identifierA.toString());
              Iterator<String> keySetIteratorInt = varNames.keySet().iterator();
              identifierName.add("\u005cninterface " + identifierA +"<<interface >> {\u005cn");
              String result="";
              ArrayList<String > tempArrayList = new ArrayList<String >();
                  while(keySetIteratorInt.hasNext()){
                String nextKey = keySetIteratorInt.next();
                if(varNames.get(nextKey).contains("^") &&varNames.get(nextKey).contains("^"))
                        result=varNames.get(nextKey).substring(varNames.get(nextKey).indexOf("^") + 1,varNames.get(nextKey).indexOf("~"));
                varMethods += "\u005cn"+(nextKey + "("+ varNames.get(nextKey).replace("^","").replace("~","") );
                tempArrayList.add(nextKey + "("+ varNames.get(nextKey).replace("^","").replace("~","") );
              }
              identifierName.add(varMethods);
              interfaceMethods.put(identifierA.image,tempArrayList);
              identifierName.add("\u005cn}\u005cn");
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case IMPORT:
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_3;
          }
          jj_consume_token(IMPORT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NAMESPACE:
            jj_consume_token(NAMESPACE);
            break;
          case ID:
            jj_consume_token(ID);
            break;
          default:
            jj_la1[14] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(SEMICOLON);
        }
        jj_consume_token(PUBLIC);
        jj_consume_token(ENUM);
        identifierA = jj_consume_token(ID);
        MethodBody(identifierA);

        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return identifierName;}
    throw new Error("Missing return statement in function");
  }

//if multiple implements
  static final public ArrayList returnIntID() throws ParseException {
  ArrayList <String > interfaceID=new ArrayList<String >();
  Token identifier;
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      identifier = jj_consume_token(ID);
    interfaceID.add(identifier.toString());
    }
        {if (true) return interfaceID;}
    throw new Error("Missing return statement in function");
  }

  static final public HashMap returnVariables() throws ParseException {
        HashMap<String,String > varNames= new HashMap<String,String >();
    varNames = returnV();
      {if (true) return varNames;}
    throw new Error("Missing return statement in function");
  }

//return variables
  static final public HashMap returnV() throws ParseException {
  HashMap<String,String > varNames= new HashMap<String,String >();
  ArrayList<String > Variables = new ArrayList<String >();
  Token vName,osb=null;
  Token vType=null,vType1=null;
  Token publicOrPrivate=null;
  String variableType="";
  String type="";
    label_5:
    while (true) {
      if (jj_2_4(5)) {
        ;
      } else {
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          publicOrPrivate = jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          publicOrPrivate = jj_consume_token(PRIVATE);
          break;
        case PROTECTED:
          publicOrPrivate = jj_consume_token(PROTECTED);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLLECTION:
        jj_consume_token(COLLECTION);
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          vType1 = jj_consume_token(ID);
          break;
        case PRIMDATATYPE:
          vType1 = jj_consume_token(PRIMDATATYPE);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(GT);
        break;
      case PRIMDATATYPE:
        vType = jj_consume_token(PRIMDATATYPE);
        break;
      case REFDATATYPE:
        vType = jj_consume_token(REFDATATYPE);
        break;
      case ID:
        vType = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OSB:
          osb = jj_consume_token(OSB);
          jj_consume_token(CSB);
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      vName = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        type = VariableAssignment();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      Variables = returnMultipleVariables();
      jj_consume_token(SEMICOLON);
     if(publicOrPrivate!=null)
     {
       if(variableType!=(vType!=null?vType.image:vType1.image)&& variableType!="")
       {
                        type=variableType;
       }
       else
       {
          type=(vType!=null?vType.image:"");
       }
       for(int i=0;i<Variables.size();i++)
       {
         if(publicOrPrivate.toString().equals("public"))
                  varNames.put("+"+Variables.get(i),vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));
         else if(publicOrPrivate.toString().equals("private")||publicOrPrivate==null)
              varNames.put("-"+Variables.get(i),vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));
         else
              varNames.put("#"+Variables.get(i),vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));

       }
       if(publicOrPrivate.toString().equals("public"))
                varNames.put("+"+vName.image,vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));
       else if(publicOrPrivate.toString().equals("private")||publicOrPrivate==null)
                varNames.put("-"+vName.image,vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));
       else
                varNames.put("#"+vName.image,vType1!=null?(vType1.image+"[*]"):(osb!=null?type+"[]":type));
       vType=null;vType1=null;osb=null;
       publicOrPrivate=null;
     }
    }
    {if (true) return varNames;}
    throw new Error("Missing return statement in function");
  }

  static final public String VariableAssignment() throws ParseException {
  String varType="";
    varType=var_skipto(SEMICOLON);
    {if (true) return varType;}
    throw new Error("Missing return statement in function");
  }

//if multiple variable declarations(separated by arrows)
  static final public ArrayList returnMultipleVariables() throws ParseException {
  ArrayList<String > Variables = new ArrayList<String >();
  Token token;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      token = jj_consume_token(ID);
                          Variables.add(token.toString());
    }
    {if (true) return Variables;}
    throw new Error("Missing return statement in function");
  }

  static final public HashMap returnMethods(Token identifierA) throws ParseException {
  String varMethod="";
  Token mType=null;
  Token mName;
  String getVar="";
  HashMap<String,String > varNames= new HashMap<String,String >();
  HashMap<String,String > var= new HashMap<String,String >();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PRIMDATATYPE:
      case REFDATATYPE:
      case ABSTRACT:
      case AT:
      case ID:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      if (jj_2_5(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          jj_consume_token(AT);
          jj_consume_token(ID);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(PUBLIC);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
          jj_consume_token(STATIC);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
          jj_consume_token(ABSTRACT);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIMDATATYPE:
          mType = jj_consume_token(PRIMDATATYPE);
          break;
        case REFDATATYPE:
          mType = jj_consume_token(REFDATATYPE);
          break;
        case ID:
          mType = jj_consume_token(ID);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        mName = jj_consume_token(ID);
        jj_consume_token(ORB);
        varNames = returnMethodVariables();
        jj_consume_token(CRB);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THROWS:
          jj_consume_token(THROWS);
          jj_consume_token(ID);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        MethodBody(identifierA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
    if(returnValue!="")
    {
      if(returnValue.toString().contains("."))
      {
          String add =returnValue.toString().split("\u005c\u005c.")[1];
          if(add.contains(";") && add.contains("="))
          {
            getSetVariables.add(add.trim().split("=")[0].trim());
          }
          else if(add.contains(";"))
          {
            getSetVariables.add(add.trim().split(";")[0].trim());
          }
      }
    }
        Iterator<String> keySetIterator = varNames.keySet().iterator();
        while(keySetIterator.hasNext()){
        String nextKey = keySetIterator.next();
        varMethod += nextKey + ":"+"^"+ varNames.get(nextKey)+"~" + ((keySetIterator.hasNext())?",":"");
    }
    varMethod+= "):" + mType.toString();
    if(returnValue=="")
        var.put("+"+mName.image,varMethod);

    if(returnValue!="") returnValue="";mType=null;varMethod="";mName=null;
      } else if (jj_2_6(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          jj_consume_token(PUBLIC);
          break;
        case PRIVATE:
          jj_consume_token(PRIVATE);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        mName = jj_consume_token(ID);
        jj_consume_token(ORB);
        varNames = returnMethodVariables();
        jj_consume_token(CRB);
        MethodBody(identifierA);
      Iterator<String> keySetIterator = varNames.keySet().iterator();
          while(keySetIterator.hasNext()){
        String nextKey = keySetIterator.next();
        varMethod += nextKey + ":"+"^"+ varNames.get(nextKey)+"~" + ((keySetIterator.hasNext())?",":"");
      }
      if(mType==null) varMethod+=")"; else varMethod+= "):" + mType.toString();
        var.put("+"+mName.image,varMethod);
      if(returnValue!="") returnValue="";mType=null;varMethod="";mName=null;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIVATE:
        case PRIMDATATYPE:
        case REFDATATYPE:
        case ABSTRACT:
        case ID:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PRIVATE:
            jj_consume_token(PRIVATE);
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABSTRACT:
            jj_consume_token(ABSTRACT);
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PRIMDATATYPE:
            mType = jj_consume_token(PRIMDATATYPE);
            break;
          case REFDATATYPE:
            mType = jj_consume_token(REFDATATYPE);
            break;
          case ID:
            mType = jj_consume_token(ID);
            break;
          default:
            jj_la1[35] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          mName = jj_consume_token(ID);
          jj_consume_token(ORB);
          varNames = returnMethodVariables();
          jj_consume_token(CRB);
          MethodBody(identifierA);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[36] = jj_gen;
            ;
          }

          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
      {if (true) return var;}
    throw new Error("Missing return statement in function");
  }

//parameters within method declaration
  static final public HashMap returnMethodVariables() throws ParseException {
  HashMap<String,String > varNames= new HashMap<String,String >();
  Token mType=null,mType1=null;
  Token mName;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMDATATYPE:
      case REFDATATYPE:
      case COMMA:
      case COLLECTION:
      case ID:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMDATATYPE:
        mType = jj_consume_token(PRIMDATATYPE);
        break;
      case REFDATATYPE:
        mType = jj_consume_token(REFDATATYPE);
        break;
      case ID:
        mType1 = jj_consume_token(ID);
        break;
      case COLLECTION:
        jj_consume_token(COLLECTION);
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          mType1 = jj_consume_token(ID);
          break;
        case PRIMDATATYPE:
          mType1 = jj_consume_token(PRIMDATATYPE);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(GT);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      mName = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OSB:
        jj_consume_token(OSB);
        jj_consume_token(CSB);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      varNames.put(mName.image,(mType!=null)?mType.image:mType1.image);
    }
      {if (true) return varNames;}
    throw new Error("Missing return statement in function");
  }

//parse method body
  static final public void MethodBody(Token identifierA) throws ParseException {
  Token t;
  Stack stack = new Stack();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OBracket:
      t = jj_consume_token(OBracket);
           stack.push(t.toString());
           error_skipto(CBracket,stack,identifierA.toString());
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_23() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(NAMESPACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(OSB)) return true;
    if (jj_scan_token(CSB)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(OBracket)) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(CBracket)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) jj_scanpos = xsp;
    if (jj_scan_token(PUBLIC)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    }
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(IMPORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) return true;
    }
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ORB)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_9()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(15)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    if (jj_scan_token(OBracket)) return true;
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    if (jj_scan_token(CBracket)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(COLLECTION)) return true;
    if (jj_scan_token(LT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyNewGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[44];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x80088001,0x0,0x0,0x0,0x0,0x8000,0x80000000,0x200000,0x400000,0x0,0x0,0x0,0x0,0x8000,0x10000000,0x38000,0x38000,0x40000,0x800000,0x0,0x1800000,0x0,0x10000000,0x81818000,0x0,0x40000,0x80000000,0x1800000,0x0,0x8000000,0x18000,0x10000,0x80000000,0x1800000,0x8000000,0x81810000,0x11800000,0x10000000,0x800000,0x1800000,0x0,0x2000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x1,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x8,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x8002000,0x20,0x30,0x10,0x8000000,0x8000000,0x8002000,0x0,0x0,0x0,0x0,0x10,0x8002000,0x10,0x8002000,0x10,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x8000080,0x80,0x0,0x0,0x8000000,0x200,0x0,0x0,0x0,0x0,0x8000000,0x0,0x8000000,0x8000000,0x0,0x8000000,0x8000000,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 44; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 44; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
