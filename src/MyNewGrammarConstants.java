/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 11;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 12;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 13;
  /** RegularExpression Id. */
  int PUBLIC = 15;
  /** RegularExpression Id. */
  int PRIVATE = 16;
  /** RegularExpression Id. */
  int PROTECTED = 17;
  /** RegularExpression Id. */
  int STATIC = 18;
  /** RegularExpression Id. */
  int CLASS = 19;
  /** RegularExpression Id. */
  int INTERFACE = 20;
  /** RegularExpression Id. */
  int EXTENDS = 21;
  /** RegularExpression Id. */
  int IMPLEMENTS = 22;
  /** RegularExpression Id. */
  int PRIMDATATYPE = 23;
  /** RegularExpression Id. */
  int REFDATATYPE = 24;
  /** RegularExpression Id. */
  int OBracket = 25;
  /** RegularExpression Id. */
  int CBracket = 26;
  /** RegularExpression Id. */
  int SEMICOLON = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int ORB = 29;
  /** RegularExpression Id. */
  int CRB = 30;
  /** RegularExpression Id. */
  int ABSTRACT = 31;
  /** RegularExpression Id. */
  int COLLECTION = 32;
  /** RegularExpression Id. */
  int GT = 33;
  /** RegularExpression Id. */
  int LT = 34;
  /** RegularExpression Id. */
  int OSB = 35;
  /** RegularExpression Id. */
  int STAR = 36;
  /** RegularExpression Id. */
  int CSB = 37;
  /** RegularExpression Id. */
  int RETURN = 38;
  /** RegularExpression Id. */
  int EQUALS = 39;
  /** RegularExpression Id. */
  int BS = 40;
  /** RegularExpression Id. */
  int NEW = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int OPERATORS = 43;
  /** RegularExpression Id. */
  int ASSIGNMENTOPERATORS = 44;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 45;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int NULLLITERAL = 48;
  /** RegularExpression Id. */
  int SUPER = 49;
  /** RegularExpression Id. */
  int INSTANCEOF = 50;
  /** RegularExpression Id. */
  int IF = 51;
  /** RegularExpression Id. */
  int ELSE = 52;
  /** RegularExpression Id. */
  int SWITCH = 53;
  /** RegularExpression Id. */
  int CASE = 54;
  /** RegularExpression Id. */
  int DEFAULT1 = 55;
  /** RegularExpression Id. */
  int ASSERT = 56;
  /** RegularExpression Id. */
  int FOR = 57;
  /** RegularExpression Id. */
  int DO = 58;
  /** RegularExpression Id. */
  int WHILE = 59;
  /** RegularExpression Id. */
  int BREAK = 60;
  /** RegularExpression Id. */
  int CONTINUE = 61;
  /** RegularExpression Id. */
  int THROW = 62;
  /** RegularExpression Id. */
  int TRY = 63;
  /** RegularExpression Id. */
  int CATCH = 64;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 65;
  /** RegularExpression Id. */
  int FINALLY = 66;
  /** RegularExpression Id. */
  int SYSTEM = 67;
  /** RegularExpression Id. */
  int IMPORT = 68;
  /** RegularExpression Id. */
  int PACKAGE = 69;
  /** RegularExpression Id. */
  int VOLATILE = 70;
  /** RegularExpression Id. */
  int AT = 71;
  /** RegularExpression Id. */
  int ENUM = 72;
  /** RegularExpression Id. */
  int THROWS = 73;
  /** RegularExpression Id. */
  int RETURNSTATEMENT = 74;
  /** RegularExpression Id. */
  int ASSIGNSTATEMENT = 75;
  /** RegularExpression Id. */
  int METHODCALL = 76;
  /** RegularExpression Id. */
  int NAMESPACE = 77;
  /** RegularExpression Id. */
  int VARASSIGN = 78;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 79;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 80;
  /** RegularExpression Id. */
  int HEX_LITERAL = 81;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 82;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 83;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 84;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 85;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 86;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 87;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 88;
  /** RegularExpression Id. */
  int STRING_LITERAL = 89;
  /** RegularExpression Id. */
  int BOOLEANLITERAL = 90;
  /** RegularExpression Id. */
  int ID = 91;
  /** RegularExpression Id. */
  int LETTER = 92;
  /** RegularExpression Id. */
  int PART_LETTER = 93;
  /** RegularExpression Id. */
  int THIS = 94;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int AFTER_EGEN = 1;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 2;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 3;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*@egen*/\"",
    "<token of kind 6>",
    "\"//\"",
    "<token of kind 8>",
    "\"/*\"",
    "\"/*@bgen(jjtree\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 14>",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"static\"",
    "\"class\"",
    "\"interface\"",
    "\"extends\"",
    "\"implements\"",
    "<PRIMDATATYPE>",
    "<REFDATATYPE>",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"abstract\"",
    "<COLLECTION>",
    "\">\"",
    "\"<\"",
    "\"[\"",
    "\"*\"",
    "\"]\"",
    "\"return\"",
    "\"=\"",
    "\"/\"",
    "\"new\"",
    "\":\"",
    "<OPERATORS>",
    "<ASSIGNMENTOPERATORS>",
    "<RSIGNEDSHIFT>",
    "<RUNSIGNEDSHIFT>",
    "\".\"",
    "\"null\"",
    "\"super\"",
    "\"instanceOf\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"assert\"",
    "\"for\"",
    "\"do\"",
    "\"while\"",
    "\"break\"",
    "\"continue\"",
    "\"throw\"",
    "\"try\"",
    "\"catch\"",
    "\"synchronized\"",
    "\"finally\"",
    "\"System.out.println\"",
    "\"import\"",
    "\"package\"",
    "\"volatile\"",
    "\"@\"",
    "\"enum\"",
    "\"throws\"",
    "<RETURNSTATEMENT>",
    "<ASSIGNSTATEMENT>",
    "<METHODCALL>",
    "<NAMESPACE>",
    "<VARASSIGN>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOLEANLITERAL>",
    "<ID>",
    "<LETTER>",
    "<PART_LETTER>",
    "<THIS>",
  };

}
