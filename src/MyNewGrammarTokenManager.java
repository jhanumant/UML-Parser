/* Generated By:JavaCC: Do not edit this line. MyNewGrammarTokenManager.java */
import java.io.*;
import net.sourceforge.plantuml.*;
import java.awt.image.*;
import javax.imageio.*;
import java.lang.*;
import java.util.*;

/** Token Manager. */
public class MyNewGrammarTokenManager implements MyNewGrammarConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000000000L) != 0L)
            return 23;
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 91;
            return 176;
         }
         if ((active0 & 0xc000000500000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 91;
            return 117;
         }
         if ((active0 & 0x1020000000000L) != 0L)
         {
            jjmatchedKind = 91;
            return 63;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 28;
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 91;
            return 57;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 108;
         if ((active0 & 0x800000000000L) != 0L)
            return 69;
         if ((active0 & 0x22000000040000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 91;
            return 162;
         }
         if ((active0 & 0x100000006a0L) != 0L)
            return 114;
         if ((active0 & 0xc000000000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 91;
            return 195;
         }
         if ((active0 & 0x2040000000080000L) != 0L || (active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 91;
            return 155;
         }
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 91;
            return 148;
         }
         if ((active0 & 0x2L) != 0L)
            return 37;
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 91;
            return 243;
         }
         if ((active0 & 0x910000080238000L) != 0L || (active1 & 0x120L) != 0L)
         {
            jjmatchedKind = 91;
            return 254;
         }
         if ((active0 & 0x200000000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 91;
            return 137;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 91;
            return 127;
         }
         return -1;
      case 1:
         if ((active0 & 0x400000000000000L) != 0L)
            return 175;
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 56;
         }
         if ((active0 & 0x20000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 59;
         }
         if ((active0 & 0x4000000100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 255;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 254;
         if ((active1 & 0x40L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 147;
         }
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 206;
         }
         if ((active0 & 0x3bf30000806f8000L) != 0L || (active1 & 0x13fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 254;
         }
         if ((active0 & 0x620L) != 0L)
            return 112;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x200L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 194;
         }
         return -1;
      case 2:
         if ((active0 & 0x8200000000000000L) != 0L)
            return 254;
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
            return 55;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 256;
         if ((active0 & 0x79f70000806f8000L) != 0L || (active1 & 0x37fL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 2;
            return 254;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
            return 257;
         }
         return -1;
      case 3:
         if ((active0 & 0x51000000000000L) != 0L || (active1 & 0x100L) != 0L)
            return 254;
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x79a60000807f8000L) != 0L || (active1 & 0x27fL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 3;
            return 254;
         }
         return -1;
      case 4:
         if ((active0 & 0x5802000000080000L) != 0L || (active1 & 0x201L) != 0L)
            return 254;
         if ((active0 & 0x21a4000080778000L) != 0L || (active1 & 0x7eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return 254;
         }
         if ((active0 & 0x4000000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 4;
            }
            return 43;
         }
         return -1;
      case 5:
         if ((active0 & 0x120000000048000L) != 0L || (active1 & 0x210L) != 0L)
            return 254;
         if ((active0 & 0x2084000080730000L) != 0L || (active1 & 0x6eL) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 5;
            return 254;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 258;
         return -1;
      case 6:
         if ((active0 & 0x80000000210000L) != 0L || (active1 & 0x24L) != 0L)
            return 254;
         if ((active0 & 0x2004000080520000L) != 0L || (active1 & 0x42L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 6;
            return 254;
         }
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 6;
            return 217;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000080000000L) != 0L || (active1 & 0x40L) != 0L)
            return 254;
         if ((active0 & 0x4000000520000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
            return 254;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 6;
            }
            return 259;
         }
         return -1;
      case 8:
         if ((active0 & 0x120000L) != 0L)
            return 254;
         if ((active0 & 0x4000000400000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 8;
            return 254;
         }
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 6;
            }
            return 259;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000400000L) != 0L)
            return 254;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 6;
            }
            return 259;
         }
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 9;
            return 254;
         }
         return -1;
      case 10:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 10;
            return 217;
         }
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 10;
            return 254;
         }
         return -1;
      case 11:
         if ((active1 & 0x2L) != 0L)
            return 254;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      case 12:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      case 13:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      case 14:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      case 15:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      case 16:
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 77;
               jjmatchedPos = 10;
            }
            return 259;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 1, 37);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 42:
         return jjStartNfaWithStates_0(0, 36, 23);
      case 44:
         return jjStopAtPos(0, 28);
      case 46:
         return jjStartNfaWithStates_0(0, 47, 69);
      case 47:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x6a0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 42);
      case 59:
         return jjStopAtPos(0, 27);
      case 60:
         return jjStartNfaWithStates_0(0, 34, 28);
      case 61:
         return jjStopAtPos(0, 39);
      case 62:
         return jjStartNfaWithStates_0(0, 33, 108);
      case 64:
         return jjStopAtPos(0, 71);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 91:
         return jjStopAtPos(0, 35);
      case 93:
         return jjStopAtPos(0, 37);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000080000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x2040000000080000L, 0x1L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x480000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000200000L, 0x100L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000500000L, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1020000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x20L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x22000000040000L, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 25);
      case 125:
         return jjStopAtPos(0, 26);
      default :
         return jjMoveNfa_0(9, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x420L, active1, 0L);
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000000L, active1, 0x21L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80024000000000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 51, 254);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4800000000000000L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000080000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000100000L, active1, 0x100L);
      case 111:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 175);
         return jjMoveStringLiteralDfa2_0(active0, 0x2200000000000000L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000030000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000008000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xaL);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa3_0(active0, 0x420L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x820000000010000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x6L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000L, active1, 0x10L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 254);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x200L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x154000080000000L, active1, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000300000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 256);
         break;
      case 121:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 63, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1080000000000000L, active1, 0x44L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 254);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 254);
         return jjMoveStringLiteralDfa4_0(active0, 0x102000000300020L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 254);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000408000L, active1, 0L);
      case 109:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 254);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x210L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2024000080060000L, active1, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000010000L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 59, 254);
         return jjMoveStringLiteralDfa5_0(active0, 0x420000L, active1, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x420L, active1, 0L);
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 254);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000048000L, active1, 0L);
      case 107:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 254);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 254);
         return jjMoveStringLiteralDfa5_0(active0, 0x100004080100000L, active1, 0x10L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 254);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 254);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 254);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x420L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 104:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 254);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x4L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L, active1, 0x8L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 258);
         return jjMoveStringLiteralDfa6_0(active0, 0x2004000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 254);
         break;
      case 116:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 254);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 254);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000080000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 254);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 254);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x420L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 254);
         break;
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 254);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L, active1, 0L);
      case 42:
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 254);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 254);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000020000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 254);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(8, 5);
         break;
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 254);
         break;
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 254);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 106:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 50, 254);
         break;
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L, active1, 0L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 254);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 65, 254);
         break;
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x400L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(13, 10);
         break;
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa16_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa17_0(active1, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
static private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(17, 67, 259);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 254;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 243:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 43:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 254:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 147:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 63:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 206:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 194:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 137:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 176:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 117:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 56:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 114:
                  if (curChar == 61)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 217:
                  if (curChar == 42)
                  {
                     if (kind > 77)
                        kind = 77;
                  }
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 175:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 55:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 162:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 257:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 256:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 36)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(62);
                  }
                  break;
               case 255:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 108:
                  if (curChar == 62)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 109;
                  if (curChar == 62)
                     jjCheckNAdd(23);
                  break;
               case 127:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 195:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 8);
                  else if ((0xa80000000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 62)
                     jjAddStates(12, 13);
                  else if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  else if (curChar == 39)
                     jjAddStates(17, 18);
                  else if (curChar == 46)
                     jjCheckNAdd(69);
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 33)
                  {
                     if (kind > 44)
                        kind = 44;
                  }
                  else if (curChar == 38)
                     jjCheckNAdd(23);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 37)
                     jjCheckNAdd(23);
                  else if (curChar == 42)
                     jjCheckNAdd(23);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddTwoStates(66, 67);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 79)
                        kind = 79;
                     jjCheckNAddStates(19, 23);
                  }
                  else if (curChar == 47)
                     jjCheckNAddTwoStates(114, 23);
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 36;
                  else if (curChar == 33)
                     jjCheckNAdd(23);
                  else if (curChar == 45)
                     jjCheckNAdd(23);
                  else if (curChar == 43)
                     jjCheckNAdd(23);
                  break;
               case 258:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  else if (curChar == 32)
                     jjCheckNAddTwoStates(44, 53);
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 259:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  break;
               case 155:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 54:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 148:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 59:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjAddStates(0, 1);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 22:
                  if ((0xa80000000000L & l) != 0L && kind > 43)
                     kind = 43;
                  break;
               case 23:
                  if (curChar == 61 && kind > 44)
                     kind = 44;
                  break;
               case 24:
                  if (curChar == 42)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 37)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 43)
                     jjCheckNAdd(23);
                  break;
               case 27:
                  if (curChar == 45)
                     jjCheckNAdd(23);
                  break;
               case 28:
                  if (curChar == 60)
                     jjCheckNAdd(23);
                  break;
               case 29:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 38)
                     jjCheckNAdd(23);
                  break;
               case 33:
                  if (curChar == 33)
                     jjCheckNAdd(23);
                  break;
               case 34:
                  if (curChar == 33 && kind > 44)
                     kind = 44;
                  break;
               case 35:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if (curChar == 62 && kind > 45)
                     kind = 45;
                  break;
               case 37:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 38:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 39:
                  if (curChar == 62 && kind > 46)
                     kind = 46;
                  break;
               case 40:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 42:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 44:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(44, 53);
                  break;
               case 45:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if (curChar == 36)
                     jjCheckNAddStates(24, 26);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 48:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 59 && kind > 74)
                     kind = 74;
                  break;
               case 60:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar != 36)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(62);
                  break;
               case 65:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
                  if (curChar == 46)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(27, 29);
                  break;
               case 71:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(72, 73);
                  break;
               case 74:
                  if (curChar == 39)
                     jjAddStates(17, 18);
                  break;
               case 75:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if (curChar == 39 && kind > 88)
                     kind = 88;
                  break;
               case 78:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 79:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 76);
                  break;
               case 80:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 81:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 83:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 84:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 86:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 87:
                  if (curChar == 34 && kind > 89)
                     kind = 89;
                  break;
               case 88:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 33);
                  break;
               case 89:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 90:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(2, 8);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 95:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 73);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(100);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(100, 73);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar != 46)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(37, 39);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(37, 39);
                  break;
               case 105:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(106);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(106, 73);
                  break;
               case 107:
                  if (curChar == 62)
                     jjAddStates(12, 13);
                  break;
               case 109:
                  if (curChar == 62)
                     jjCheckNAdd(23);
                  break;
               case 110:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(114, 23);
                  break;
               case 112:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 183:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 184:
                  if (curChar == 36)
                     jjCheckNAddStates(40, 42);
                  break;
               case 185:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 186:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(186, 187);
                  break;
               case 187:
                  if (curChar == 61)
                     jjCheckNAddTwoStates(188, 189);
                  break;
               case 188:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(188, 189);
                  break;
               case 189:
                  if (curChar == 36)
                     jjCheckNAddStates(43, 45);
                  break;
               case 190:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 191:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(191, 192);
                  break;
               case 192:
                  if (curChar == 59 && kind > 75)
                     kind = 75;
                  break;
               case 197:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 198:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 199:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 200:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(201, 203);
                  break;
               case 201:
                  if (curChar == 36)
                     jjCheckNAddStates(46, 48);
                  break;
               case 202:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 203:
                  if (curChar != 41)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 208:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 209:
                  if (curChar != 36)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(210);
                  break;
               case 210:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(210);
                  break;
               case 214:
                  if (curChar != 36)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(9, 11);
                  break;
               case 215:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 216:
                  if (curChar != 46)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjAddStates(0, 1);
                  break;
               case 218:
                  if (curChar == 42 && kind > 77)
                     kind = 77;
                  break;
               case 219:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(219);
                  break;
               case 220:
                  if (curChar != 48)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(19, 23);
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(222, 67);
                  break;
               case 223:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(223, 67);
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 226:
                  if (curChar == 46)
                     jjCheckNAdd(227);
                  break;
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(227, 228);
                  break;
               case 229:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(230);
                  break;
               case 230:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(230, 73);
                  break;
               case 232:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 233:
                  if (curChar == 46)
                     jjCheckNAdd(234);
                  break;
               case 235:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(236);
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddTwoStates(236, 73);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 243:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 252;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 250;
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 244;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 110)
                     jjAddStates(54, 55);
                  break;
               case 254:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 149;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 206:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 117)
                     jjCheckNAdd(141);
                  break;
               case 194:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 211;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 196;
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 137:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 139;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 176:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 180;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 117:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 110)
                     jjCheckNAdd(118);
                  if (curChar == 110)
                     jjCheckNAdd(116);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 217:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 175:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 179;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 162:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 164;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 257:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 120;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 256:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(62);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 255:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 116)
                     jjCheckNAdd(119);
                  if (curChar == 116)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  break;
               case 127:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 101)
                     jjCheckNAdd(10);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 131;
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 195:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 212;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 206;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 204;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(9, 11);
                  }
                  else if (curChar == 124)
                     jjCheckNAdd(23);
                  else if (curChar == 94)
                     jjCheckNAdd(23);
                  if (curChar == 98)
                     jjAddStates(56, 59);
                  else if (curChar == 116)
                     jjAddStates(60, 63);
                  else if (curChar == 100)
                     jjAddStates(64, 65);
                  else if (curChar == 108)
                     jjAddStates(66, 67);
                  else if (curChar == 115)
                     jjAddStates(68, 69);
                  else if (curChar == 99)
                     jjAddStates(70, 71);
                  else if (curChar == 118)
                     jjAddStates(72, 73);
                  else if (curChar == 102)
                     jjAddStates(74, 76);
                  else if (curChar == 83)
                     jjAddStates(77, 79);
                  else if (curChar == 105)
                     jjAddStates(80, 81);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 258:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 259:
               case 215:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  break;
               case 155:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 157;
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 148:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 150;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 59:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAdd(219);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(215, 216);
                  if (curChar == 119)
                     jjAddStates(82, 83);
                  break;
               case 0:
                  if (curChar == 110 && kind > 32)
                     kind = 32;
                  break;
               case 1:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if (curChar == 116 && kind > 32)
                     kind = 32;
                  break;
               case 11:
               case 19:
                  if (curChar == 115)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 31:
                  if (curChar == 94)
                     jjCheckNAdd(23);
                  break;
               case 32:
                  if (curChar == 124)
                     jjCheckNAdd(23);
                  break;
               case 46:
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               case 50:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 58:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 61:
               case 62:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(62);
                  break;
               case 64:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 67:
                  if ((0x100000001000L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 70:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(84, 85);
                  break;
               case 73:
                  if ((0x5000000050L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 75:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 77:
                  if (curChar == 92)
                     jjAddStates(86, 88);
                  break;
               case 78:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 84:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 85:
                  if (curChar == 92)
                     jjAddStates(89, 91);
                  break;
               case 86:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 94:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(94, 95);
                  break;
               case 104:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 113:
                  if (kind > 8)
                     kind = 8;
                  break;
               case 115:
                  if (curChar == 105)
                     jjAddStates(80, 81);
                  break;
               case 116:
                  if (curChar == 116 && kind > 23)
                     kind = 23;
                  break;
               case 118:
                  if (curChar == 116)
                     jjCheckNAdd(119);
                  break;
               case 119:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if (curChar != 93)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(119);
                  break;
               case 121:
                  if (curChar == 110)
                     jjCheckNAdd(118);
                  break;
               case 122:
                  if (curChar == 83)
                     jjAddStates(77, 79);
                  break;
               case 123:
                  if (curChar == 103 && kind > 23)
                     kind = 23;
                  break;
               case 124:
               case 167:
                  if (curChar == 110)
                     jjCheckNAdd(123);
                  break;
               case 125:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 128:
                  if (curChar == 103)
                     jjCheckNAdd(119);
                  break;
               case 129:
               case 169:
                  if (curChar == 110)
                     jjCheckNAdd(128);
                  break;
               case 130:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 101)
                     jjCheckNAdd(10);
                  break;
               case 134:
                  if (curChar == 102)
                     jjAddStates(74, 76);
                  break;
               case 135:
                  if (curChar == 97)
                     jjCheckNAdd(116);
                  break;
               case 136:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 138:
                  if (curChar == 97)
                     jjCheckNAdd(118);
                  break;
               case 139:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 101 && kind > 90)
                     kind = 90;
                  break;
               case 142:
                  if (curChar == 115)
                     jjCheckNAdd(141);
                  break;
               case 143:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 118)
                     jjAddStates(72, 73);
                  break;
               case 146:
                  if (curChar == 100 && kind > 23)
                     kind = 23;
                  break;
               case 149:
                  if (curChar == 100)
                     jjCheckNAdd(119);
                  break;
               case 150:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 99)
                     jjAddStates(70, 71);
                  break;
               case 153:
                  if (curChar == 114 && kind > 23)
                     kind = 23;
                  break;
               case 154:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 156:
                  if (curChar == 114)
                     jjCheckNAdd(119);
                  break;
               case 157:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 115)
                     jjAddStates(68, 69);
                  break;
               case 160:
                  if (curChar == 114)
                     jjCheckNAdd(116);
                  break;
               case 161:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 163:
                  if (curChar == 114)
                     jjCheckNAdd(118);
                  break;
               case 164:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 163;
                  break;
               case 165:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 108)
                     jjAddStates(66, 67);
                  break;
               case 168:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 170:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 100)
                     jjAddStates(64, 65);
                  break;
               case 172:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 173:
                  if (curChar == 108)
                     jjCheckNAdd(172);
                  break;
               case 174:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 177:
                  if (curChar == 101)
                     jjCheckNAdd(119);
                  break;
               case 178:
                  if (curChar == 108)
                     jjCheckNAdd(177);
                  break;
               case 179:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 116)
                     jjAddStates(60, 63);
                  break;
               case 184:
               case 185:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 189:
               case 190:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 193:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 196:
                  if (curChar != 115)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 198:
               case 199:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(199, 200);
                  break;
               case 201:
               case 202:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(46, 48);
                  break;
               case 204:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 205:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 207:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 209:
               case 210:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(210);
                  break;
               case 211:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 212:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               case 213:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 214:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(9, 11);
                  break;
               case 219:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(219);
                  break;
               case 221:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(222);
                  break;
               case 222:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(222, 67);
                  break;
               case 224:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(225, 226);
                  break;
               case 225:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(225, 226);
                  break;
               case 227:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(98, 99);
                  break;
               case 228:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 231:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(232);
                  break;
               case 232:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 234:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(102, 103);
                  break;
               case 237:
                  if (curChar == 98)
                     jjAddStates(56, 59);
                  break;
               case 238:
                  if (curChar == 110 && kind > 23)
                     kind = 23;
                  break;
               case 239:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 244:
                  if (curChar == 116)
                     jjCheckNAdd(172);
                  break;
               case 245:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if (curChar == 110)
                     jjCheckNAdd(119);
                  break;
               case 247:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 246;
                  break;
               case 248:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 116)
                     jjCheckNAdd(177);
                  break;
               case 253:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 84:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 113:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 8)
                     kind = 8;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 254 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_4(0x2000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return 1;
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   217, 218, 93, 94, 73, 97, 98, 101, 102, 215, 216, 219, 108, 110, 84, 85, 
   87, 75, 77, 221, 223, 67, 224, 231, 47, 48, 49, 69, 70, 73, 84, 85, 
   89, 87, 93, 94, 73, 103, 104, 73, 185, 186, 187, 190, 191, 192, 201, 202, 
   203, 225, 226, 232, 233, 234, 44, 53, 243, 245, 251, 253, 195, 205, 207, 213, 
   176, 181, 168, 170, 162, 165, 155, 158, 148, 151, 137, 140, 144, 127, 132, 133, 
   117, 121, 60, 61, 71, 72, 78, 79, 81, 86, 88, 90, 95, 96, 99, 100, 
   105, 106, 227, 228, 229, 230, 235, 236, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\160\165\142\154\151\143", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\163\164\141\164\151\143", "\143\154\141\163\163", 
"\151\156\164\145\162\146\141\143\145", "\145\170\164\145\156\144\163", "\151\155\160\154\145\155\145\156\164\163", 
null, null, "\173", "\175", "\73", "\54", "\50", "\51", 
"\141\142\163\164\162\141\143\164", null, "\76", "\74", "\133", "\52", "\135", "\162\145\164\165\162\156", "\75", 
"\57", "\156\145\167", "\72", null, null, null, null, "\56", "\156\165\154\154", 
"\163\165\160\145\162", "\151\156\163\164\141\156\143\145\117\146", "\151\146", "\145\154\163\145", 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", 
"\141\163\163\145\162\164", "\146\157\162", "\144\157", "\167\150\151\154\145", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\164\150\162\157\167", "\164\162\171", "\143\141\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\146\151\156\141\154\154\171", 
"\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\151\155\160\157\162\164", "\160\141\143\153\141\147\145", 
"\166\157\154\141\164\151\154\145", "\100", "\145\156\165\155", "\164\150\162\157\167\163", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "AFTER_EGEN",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, 2, 3, 4, 4, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffff8001L, 0x4f08ffffL, 
};
static final long[] jjtoSkip = {
   0x387eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x3800L, 0x0L, 
};
static final long[] jjtoMore = {
   0x4780L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[254];
static private final int[] jjstateSet = new int[508];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public MyNewGrammarTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 254; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
